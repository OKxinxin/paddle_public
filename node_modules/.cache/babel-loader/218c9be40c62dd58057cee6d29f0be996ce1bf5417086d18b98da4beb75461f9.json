{"ast":null,"code":"import DisPwin from './dis.vue';\nimport * as THREE from 'three';\nexport default {\n  name: 'Display_win',\n  components: {\n    DisPwin\n  },\n  props: {\n    niiGzPath: {\n      type: String,\n      required: true\n    },\n    labelPath: {\n      type: String,\n      required: true\n    }\n  },\n  mounted() {\n    this.initScene();\n    this.loadData();\n    this.loadLabelData();\n    this.addViews();\n    this.animate();\n  },\n  methods: {\n    initScene() {\n      this.scene = new THREE.Scene();\n      this.camera = new THREE.PerspectiveCamera(45, this.$refs.container.offsetWidth / this.$refs.container.offsetHeight, 0.1, 1000);\n      this.renderer = new THREE.WebGLRenderer();\n      this.renderer.setSize(this.$refs.container.offsetWidth, this.$refs.container.offsetHeight);\n      this.$refs.container.appendChild(this.renderer.domElement);\n    },\n    loadData() {\n      const loader = new THREE.NIFTIReader();\n      loader.load(this.niiGzPath, nifti => {\n        const data = nifti.getData();\n        const geometry = new THREE.BoxGeometry(nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\n        const texture = new THREE.DataTexture3D(data, nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\n        texture.format = THREE.RedFormat;\n        const material = new THREE.ShaderMaterial({\n          uniforms: {\n            u_tex: {\n              value: texture\n            }\n          },\n          vertexShader: `\n            varying vec3 v_position;\n            void main() {\n              v_position = position;\n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n          `,\n          fragmentShader: `\n            varying vec3 v_position;\n            uniform sampler3D u_tex;\n            void main() {\n              vec3 coord = vec3(v_position.x, v_position.y, v_position.z);\n              gl_FragColor = texture(u_tex, coord);\n            }\n          `\n        });\n        const cube = new THREE.Mesh(geometry, material);\n        this.cube = cube;\n        this.scene.add(this.cube);\n      });\n    },\n    loadLabelData() {\n      const labelLoader = new THREE.NIFTIReader();\n      labelLoader.load(this.labelPath, nifti => {\n        const data = nifti.getData();\n        const geometry = new THREE.BoxGeometry(nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\n        const texture = new THREE.DataTexture3D(data, nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\n        texture.format = THREE.RedFormat;\n        const material = new THREE.ShaderMaterial({\n          uniforms: {\n            u_tex: {\n              value: texture\n            }\n          },\n          vertexShader: `\n            varying vec3 v_position;\n            void main() {\n              v_position = position;\n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n          `,\n          fragmentShader: `\n            varying vec3 v_position;\n            uniform sampler3D u_tex;\n            void main() {\n              vec3 coord = vec3(v_position.x, v_position.y, v_position.z);\n              gl_FragColor = texture(u_tex, coord);\n            }\n          `\n        });\n        const cube = new THREE.Mesh(geometry, material);\n        this.labelCube = cube;\n        this.labelCube.position.x = nifti.hdr.dims[1] + 1;\n        this.scene.add(this.labelCube);\n      });\n    },\n    addViews() {\n      const views = [{\n        left: 0,\n        bottom: 0,\n        width: 0.5,\n        height: 0.5,\n        eye: [0, 0, 800],\n        up: [0, 1, 0],\n        background: new THREE.Color().setRGB(0.5, 0.5, 0.7),\n        fov: 45\n      }, {\n        left: 0.5,\n        bottom: 0,\n        width: 0.5,\n        height: 0.5,\n        eye: [0, 800, 0],\n        up: [0, 0, -1],\n        background: new THREE.Color().setRGB(0.7, 0.5, 0.5),\n        fov: 45\n      }, {\n        left: 0,\n        bottom: 0.5,\n        width: 0.5,\n        height: 0.5,\n        eye: [800, 0, 0],\n        up: [0, 0, -1],\n        background: new THREE.Color().setRGB(0.7, 0.7, 0.5),\n        fov: 45\n      }];\n      this.views = views.map(view => {\n        const camera = new THREE.PerspectiveCamera(view.fov, this.$refs.container.offsetWidth / this.$refs.container.offsetHeight, 0.1, 1000);\n        camera.up.fromArray(view.up);\n        camera.position.fromArray(view.eye);\n        const scene = new THREE.Scene();\n        scene.background = view.background;\n        scene.add(this.cube.clone());\n        scene.add(this.labelCube.clone());\n        const _width = this.$refs.container.offsetWidth * view.width;\n        const _height = this.$refs.container.offsetHeight * view.height;\n        const left = this.$refs.container.offsetWidth * view.left;\n        const bottom = this.$refs.container.offsetHeight * view.bottom;\n        return {\n          left,\n          bottom,\n          width: _width,\n          height: _height,\n          camera,\n          scene\n        };\n      });\n      this.currentView = this.views[0];\n    },\n    animate() {\n      requestAnimationFrame(this.animate);\n      // 在这里更新和渲染场景\n      this.cube.rotation.x += 0.01;\n      this.cube.rotation.y += 0.01;\n      this.labelCube.rotation.x += 0.01;\n      this.labelCube.rotation.y += 0.01;\n      this.views.forEach(({\n        left,\n        bottom,\n        width,\n        height,\n        camera,\n        scene\n      }) => {\n        this.renderer.setViewport(left, bottom, width, height);\n        this.renderer.setScissor(left, bottom, width, height);\n        this.renderer.setScissorTest(true);\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        this.renderer.render(scene, camera);\n      });\n    }\n  }\n};","map":{"version":3,"names":["DisPwin","THREE","name","components","props","niiGzPath","type","String","required","labelPath","mounted","initScene","loadData","loadLabelData","addViews","animate","methods","scene","Scene","camera","PerspectiveCamera","$refs","container","offsetWidth","offsetHeight","renderer","WebGLRenderer","setSize","appendChild","domElement","loader","NIFTIReader","load","nifti","data","getData","geometry","BoxGeometry","hdr","dims","texture","DataTexture3D","format","RedFormat","material","ShaderMaterial","uniforms","u_tex","value","vertexShader","fragmentShader","cube","Mesh","add","labelLoader","labelCube","position","x","views","left","bottom","width","height","eye","up","background","Color","setRGB","fov","map","view","fromArray","clone","_width","_height","currentView","requestAnimationFrame","rotation","y","forEach","setViewport","setScissor","setScissorTest","aspect","updateProjectionMatrix","render"],"sources":["E:\\HomeWork\\百度飞浆\\medical_0.1.0\\src\\components\\Display\\display.vue"],"sourcesContent":["<template>\r\n  <div ref=\"container\">\r\n    <DisPwin :niiGzPath=\"niiGzPath\" :labelPath=\"labelPath\"></DisPwin>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport DisPwin from './dis.vue';\r\nimport * as THREE from 'three';\r\n\r\nexport default {\r\n  name: 'Display_win',\r\n\r\n  components: {\r\n    DisPwin,\r\n  },\r\n\r\n\r\n  props: {\r\n    niiGzPath: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    labelPath: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initScene();\r\n    this.loadData();\r\n    this.loadLabelData();\r\n    this.addViews();\r\n    this.animate();\r\n  },\r\n  methods: {\r\n    initScene() {\r\n      this.scene = new THREE.Scene();\r\n      this.camera = new THREE.PerspectiveCamera(\r\n        45,\r\n        this.$refs.container.offsetWidth / this.$refs.container.offsetHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      this.renderer = new THREE.WebGLRenderer();\r\n      this.renderer.setSize(\r\n        this.$refs.container.offsetWidth,\r\n        this.$refs.container.offsetHeight\r\n      );\r\n      this.$refs.container.appendChild(this.renderer.domElement);\r\n    },\r\n\r\n    loadData() {\r\n      const loader = new THREE.NIFTIReader();\r\n      loader.load(this.niiGzPath, nifti => {\r\n        const data = nifti.getData();\r\n        const geometry = new THREE.BoxGeometry(nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\r\n        const texture = new THREE.DataTexture3D(data, nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\r\n        texture.format = THREE.RedFormat;\r\n        const material = new THREE.ShaderMaterial({\r\n          uniforms: {\r\n            u_tex: { value: texture },\r\n          },\r\n          vertexShader: `\r\n            varying vec3 v_position;\r\n            void main() {\r\n              v_position = position;\r\n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            }\r\n          `,\r\n          fragmentShader: `\r\n            varying vec3 v_position;\r\n            uniform sampler3D u_tex;\r\n            void main() {\r\n              vec3 coord = vec3(v_position.x, v_position.y, v_position.z);\r\n              gl_FragColor = texture(u_tex, coord);\r\n            }\r\n          `,\r\n        });\r\n        const cube = new THREE.Mesh(geometry, material);\r\n        this.cube = cube;\r\n        this.scene.add(this.cube);\r\n      });\r\n    },\r\n\r\n    loadLabelData() {\r\n      const labelLoader = new THREE.NIFTIReader();\r\n      labelLoader.load(this.labelPath, nifti => {\r\n        const data = nifti.getData();\r\n        const geometry = new THREE.BoxGeometry(nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\r\n        const texture = new THREE.DataTexture3D(data, nifti.hdr.dims[1], nifti.hdr.dims[2], nifti.hdr.dims[3]);\r\n        texture.format = THREE.RedFormat;\r\n        const material = new THREE.ShaderMaterial({\r\n          uniforms: {\r\n            u_tex: { value: texture },\r\n          },\r\n          vertexShader: `\r\n            varying vec3 v_position;\r\n            void main() {\r\n              v_position = position;\r\n              gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n            }\r\n          `,\r\n          fragmentShader: `\r\n            varying vec3 v_position;\r\n            uniform sampler3D u_tex;\r\n            void main() {\r\n              vec3 coord = vec3(v_position.x, v_position.y, v_position.z);\r\n              gl_FragColor = texture(u_tex, coord);\r\n            }\r\n          `,\r\n        });\r\n        const cube = new THREE.Mesh(geometry, material);\r\n        this.labelCube = cube;\r\n        this.labelCube.position.x = nifti.hdr.dims[1] + 1;\r\n        this.scene.add(this.labelCube);\r\n      });\r\n    },\r\n\r\n    addViews() {\r\n      const views = [\r\n        {\r\n          left: 0,\r\n          bottom: 0,\r\n          width: 0.5,\r\n          height: 0.5,\r\n          eye: [0, 0, 800],\r\n          up: [0, 1, 0],\r\n          background: new THREE.Color().setRGB(0.5, 0.5, 0.7),\r\n          fov: 45,\r\n        },\r\n        {\r\n          left: 0.5,\r\n          bottom: 0,\r\n          width: 0.5,\r\n          height: 0.5,\r\n          eye: [0, 800, 0],\r\n          up: [0, 0, -1],\r\n          background: new THREE.Color().setRGB(0.7, 0.5, 0.5),\r\n          fov: 45,\r\n        },\r\n        {\r\n          left: 0,\r\n          bottom: 0.5,\r\n          width: 0.5,\r\n          height: 0.5,\r\n          eye: [800, 0, 0],\r\n          up: [0, 0, -1],\r\n          background: new THREE.Color().setRGB(0.7, 0.7, 0.5),\r\n          fov: 45,\r\n        },\r\n      ];\r\n      this.views = views.map(view => {\r\n        const camera = new THREE.PerspectiveCamera(\r\n          view.fov,\r\n          this.$refs.container.offsetWidth / this.$refs.container.offsetHeight,\r\n          0.1,\r\n          1000\r\n        );\r\n        camera.up.fromArray(view.up);\r\n        camera.position.fromArray(view.eye);\r\n        const scene = new THREE.Scene();\r\n        scene.background = view.background;\r\n        scene.add(this.cube.clone());\r\n        scene.add(this.labelCube.clone());\r\n        const _width = this.$refs.container.offsetWidth * view.width;\r\n        const _height = this.$refs.container.offsetHeight * view.height;\r\n        const left = this.$refs.container.offsetWidth * view.left;\r\n        const bottom = this.$refs.container.offsetHeight * view.bottom;\r\n        return {\r\n          left,\r\n          bottom,\r\n          width: _width,\r\n          height: _height,\r\n          camera,\r\n          scene,\r\n        };\r\n      });\r\n      this.currentView = this.views[0];\r\n    },\r\n\r\n    animate() {\r\n      requestAnimationFrame(this.animate);\r\n      // 在这里更新和渲染场景\r\n      this.cube.rotation.x += 0.01;\r\n      this.cube.rotation.y += 0.01;\r\n      this.labelCube.rotation.x += 0.01;\r\n      this.labelCube.rotation.y += 0.01;\r\n\r\n      this.views.forEach(({ left, bottom, width, height, camera, scene }) => {\r\n        this.renderer.setViewport(left, bottom, width, height);\r\n        this.renderer.setScissor(left, bottom, width, height);\r\n        this.renderer.setScissorTest(true);\r\n        camera.aspect = width / height;\r\n        camera.updateProjectionMatrix();\r\n        this.renderer.render(scene, camera);\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}